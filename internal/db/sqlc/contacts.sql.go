// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contacts.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
    company_id, email, first_name, last_name, position, department, linkedin_url
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, company_id, email, first_name, last_name, position, department, linkedin_url, created_at
`

type CreateContactParams struct {
	CompanyID   int32
	Email       string
	FirstName   pgtype.Text
	LastName    pgtype.Text
	Position    pgtype.Text
	Department  pgtype.Text
	LinkedinUrl pgtype.Text
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.CompanyID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Position,
		arg.Department,
		arg.LinkedinUrl,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Position,
		&i.Department,
		&i.LinkedinUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listContactsByCompanyID = `-- name: ListContactsByCompanyID :many
SELECT id, company_id, email, first_name, last_name, position, department, linkedin_url, created_at FROM contacts
WHERE company_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListContactsByCompanyID(ctx context.Context, companyID int32) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContactsByCompanyID, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Position,
			&i.Department,
			&i.LinkedinUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
